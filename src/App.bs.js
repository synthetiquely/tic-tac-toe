// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("TodoItem");

function make(item, onToggle, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("div", {
                          className: "item",
                          onClick: (function () {
                              return Curry._1(onToggle, /* () */0);
                            })
                        }, React.createElement("input", {
                              checked: item[/* completed */2],
                              type: "checkbox"
                            }), item[/* title */1]);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var TodoItem = /* module */[
  /* component */component,
  /* make */make
];

function getValueFromDomNode($$event) {
  return $$event.target.value;
}

var component$1 = ReasonReact.reducerComponent("TextInput");

function make$1(onSubmit, _) {
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("input", {
                          placeholder: "Write something to do",
                          type: "text",
                          value: self[/* state */1],
                          onKeyDown: (function ($$event) {
                              if ($$event.key === "Enter") {
                                Curry._1(onSubmit, self[/* state */1]);
                                return Curry._1(self[/* send */3], (function () {
                                              return "";
                                            }));
                              } else {
                                return 0;
                              }
                            }),
                          onChange: (function ($$event) {
                              return Curry._1(self[/* send */3], $$event.target.value);
                            })
                        });
            }),
          /* initialState */(function () {
              return "";
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (newText, _) {
              return /* Update */Block.__(0, [Curry._1(newText, /* () */0)]);
            }),
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var TextInput = /* module */[
  /* getValueFromDomNode */getValueFromDomNode,
  /* component */component$1,
  /* make */make$1
];

var lastId = /* record */[/* contents */0];

function newItem(text) {
  lastId[0] = lastId[0] + 1 | 0;
  return /* record */[
          /* id */lastId[0],
          /* title */text,
          /* completed */false
        ];
}

var component$2 = ReasonReact.reducerComponent("App");

function make$2() {
  return /* record */[
          /* debugName */component$2[/* debugName */0],
          /* reactClassInternal */component$2[/* reactClassInternal */1],
          /* handedOffState */component$2[/* handedOffState */2],
          /* willReceiveProps */component$2[/* willReceiveProps */3],
          /* didMount */component$2[/* didMount */4],
          /* didUpdate */component$2[/* didUpdate */5],
          /* willUnmount */component$2[/* willUnmount */6],
          /* willUpdate */component$2[/* willUpdate */7],
          /* shouldUpdate */component$2[/* shouldUpdate */8],
          /* render */(function (param) {
              var send = param[/* send */3];
              var items = param[/* state */1][/* items */0];
              var numItems = List.length(items);
              return React.createElement("div", {
                          className: "app"
                        }, React.createElement("div", {
                              className: "title"
                            }, "What to do"), ReasonReact.element(undefined, undefined, make$1((function (text) {
                                    return Curry._1(send, /* AddItem */Block.__(0, [text]));
                                  }), /* array */[])), React.createElement("div", {
                              className: "items"
                            }, $$Array.of_list(List.map((function (item) {
                                        return ReasonReact.element(String(item[/* id */0]), undefined, make(item, (function () {
                                                          return Curry._1(send, /* ToggleItem */Block.__(1, [item[/* id */0]]));
                                                        }), /* array */[]));
                                      }), items))), React.createElement("div", {
                              className: "footer"
                            }, String(numItems) + " items"));
            }),
          /* initialState */(function () {
              return /* record */[/* items : :: */[
                        /* record */[
                          /* id */0,
                          /* title */"Write some things to do",
                          /* completed */false
                        ],
                        /* [] */0
                      ]];
            }),
          /* retainedProps */component$2[/* retainedProps */11],
          /* reducer */(function (action, param) {
              var items = param[/* items */0];
              if (action.tag) {
                var id = action[0];
                var items$1 = List.map((function (item) {
                        var match = item[/* id */0] === id;
                        if (match) {
                          return /* record */[
                                  /* id */item[/* id */0],
                                  /* title */item[/* title */1],
                                  /* completed */!item[/* completed */2]
                                ];
                        } else {
                          return item;
                        }
                      }), items);
                return /* Update */Block.__(0, [/* record */[/* items */items$1]]);
              } else {
                return /* Update */Block.__(0, [/* record */[/* items : :: */[
                              newItem(action[0]),
                              items
                            ]]]);
              }
            }),
          /* jsElementWrapped */component$2[/* jsElementWrapped */13]
        ];
}

exports.TodoItem = TodoItem;
exports.TextInput = TextInput;
exports.lastId = lastId;
exports.newItem = newItem;
exports.component = component$2;
exports.make = make$2;
/* component Not a pure module */
